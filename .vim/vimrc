" Jack Frankland's .vimrc Configuration
" =====================================
" ViCompatibility(DO NOT MOVE - MUST BE FIRST IN FILE) {{{
" ============
" If a .vimrc is found in the $HOME directory then `:set nocompatible`
" happens by default.
if &compatible
  " Only set no 'nocompatible' when 'compatible' is set.
  set nocompatible
endif
" }}}
" Vimscript file settings {{{
" =======================
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}
" Filetype indentation + syntax {{{
" ====================
 " Automatic, language-dependent indentation, syntax coloring and other
" functionality.
filetype indent plugin on
syntax on
" }}}
" Leader Mappings {{{
" ===============
let mapleader="\<Space>" " Set leader key to be spacebar.
let maplocalleader="\\" " Set local leader to be backslash.
" }}}
" Colors {{{
" =====
colorscheme catppuccin-frappe " Set colorscheme.
" }}}
" Plugin Configuration {{{
" ====================
" Airline {{{
" =======
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " powerline symbols
  let g:airline_powerline_fonts = 1
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.maxlinenr = ''
" }}}
" FZF {{{
" ===
" Usage mappings.
set rtp+=~/.fzf
nnoremap <C-p> :Files<CR>
nnoremap <C-x><C-p> :Files $HOME/.vim<CR>
nnoremap <C-g> :Ag<CR>
nnoremap <leader>pf :Files<CR>
nnoremap <leader>pg :GFiles<CR>
nnoremap <leader>pc :Commits<CR>
nnoremap <leader>pb :Buffers<CR>
nnoremap <leader>pt :Tags<CR>
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <c-x><C-k> <plug>(fzf-complete-word)
imap <c-x><C-f> <plug>(fzf-complete-path)
imap <c-x><C-j> <plug>(fzf-complete-file)
imap <c-x><C-l> <plug>(fzf-complete-line)
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }
" Match current colorscheme.
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" }}}
" Formative {{{
" =========
" Remove + replace default mappings.
let g:fmtv_no_mappings = 1
nmap <C-c> <Plug>FormativeNor
vmap <C-c> <Plug>FormativeVis
imap <C-c> <Plug>FormativeIns
" }}}
" Vim-Spirv {{{
" =========
" Specify the value of the SpirvCurrentID highlight group.
let g:spirv_current_id_highlight = 'term=bold cterm=bold gui=bold'
" }}}
" COC {{{
" ===
" coc.nvim Conqueror of Completion
let g:coc_global_extensions = [
\   'coc-clangd',
\   'coc-cmake',
\   'coc-css',
\   'coc-docker',
\   'coc-html',
\   'coc-jedi',
\   'coc-json',
\   'coc-marketplace',
\   'coc-pyright',
\   'coc-ultisnips',
\   'coc-vimlsp',
\   'coc-yaml',
\]
highlight link CocMenuSel Todo
" Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')
" }}}
" Fugative {{{
" ========
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
"}}}
" Startify {{{
" ========
let g:startify_change_to_dir = 0
" }}}
" }}}
" Plugins {{{
" =======
" Vim >=8 has native support for adding runtime paths.
if has('packages')
    packloadall
    silent! helptags ALL
else
    " Use pathogen for plug-in loading.
    source $HOME/.vim/pack/bundle/opt/vim-pathogen/autoload /pathogen.vim
    call pathogen#infect('pack/bundle/start/{}')
    Helptags
endif
" }}}
" Folds {{{
" =====
set foldlevelstart=99
"}}}
" Update Time {{{
" redraw every 250ms
set updatetime=250
" }}}
" vim: foldenable foldmethod=marker foldlevel=0 ts=4 sts=4 sw=4
